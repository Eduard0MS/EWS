#!/usr/bin/env python3
"""
CRUD de Documenta√ß√£o - Feira Virtual
Sistema completo para Create, Read, Update, Delete da documenta√ß√£o
"""

import os
import sys
import shutil
import subprocess
import webbrowser
from pathlib import Path
import time
from datetime import datetime


class DocumentationCRUD:
    """Sistema CRUD para gerenciamento da documenta√ß√£o"""

    def __init__(self):
        self.base_dir = Path(__file__).parent
        self.docs_dir = self.base_dir / "backend" / "docs"
        self.source_dir = self.docs_dir / "source"
        self.build_dir = self.docs_dir / "build"
        self.html_dir = self.build_dir / "html"

    def banner(self):
        """Exibe banner do sistema"""
        print("=" * 60)
        print("         FEIRA VIRTUAL - CRUD DE DOCUMENTA√á√ÉO")
        print("=" * 60)
        print()

    # CREATE - Criar nova documenta√ß√£o
    def create_docs(self, module_name=None):
        """Criar documenta√ß√£o para novos m√≥dulos"""
        print("üî® CREATE: Gerando nova documenta√ß√£o...")

        if module_name:
            self._create_module_docs(module_name)
        else:
            self._create_all_docs()

    def _create_module_docs(self, module_name):
        """Criar documenta√ß√£o para m√≥dulo espec√≠fico"""
        rst_content = f"""
{module_name}
{"=" * len(module_name)}

.. automodule:: {module_name}
   :members:
   :undoc-members:
   :show-inheritance:
"""

        module_file = self.source_dir / f"{module_name}.rst"
        with open(module_file, "w", encoding="utf-8") as f:
            f.write(rst_content)

        print(f"‚úÖ Documenta√ß√£o criada para m√≥dulo: {module_name}")

    def _create_all_docs(self):
        """Gerar toda a documenta√ß√£o"""
        self._run_sphinx_build()

    # READ - Ler/visualizar documenta√ß√£o
    def read_docs(self, open_browser=True):
        """Visualizar documenta√ß√£o existente"""
        print("üìñ READ: Abrindo documenta√ß√£o...")

        if not self.html_dir.exists():
            print("‚ùå Documenta√ß√£o n√£o encontrada! Execute 'create' primeiro.")
            return False

        index_file = self.html_dir / "index.html"
        if not index_file.exists():
            print("‚ùå Arquivo index.html n√£o encontrado!")
            return False

        if open_browser:
            webbrowser.open(f"file://{index_file.absolute()}")
            print(f"üåê Documenta√ß√£o aberta no navegador: {index_file}")
        else:
            print(f"üìÑ Documenta√ß√£o dispon√≠vel em: {index_file}")

        return True

    # UPDATE - Atualizar documenta√ß√£o
    def update_docs(self, force=False):
        """Atualizar documenta√ß√£o existente"""
        print("üîÑ UPDATE: Atualizando documenta√ß√£o...")

        if force or self._docs_need_update():
            print("üî® Regenerando documenta√ß√£o...")
            self.delete_docs(confirm=False)  # Limpar antes
            self.create_docs()
            print("‚úÖ Documenta√ß√£o atualizada com sucesso!")
        else:
            print("‚ÑπÔ∏è Documenta√ß√£o j√° est√° atualizada.")

    def _docs_need_update(self):
        """Verifica se a documenta√ß√£o precisa ser atualizada"""
        if not self.html_dir.exists():
            return True

        # Verificar se arquivos fonte s√£o mais novos que HTML
        source_files = list(self.source_dir.glob("*.rst")) + list(
            self.source_dir.glob("*.py")
        )
        if not source_files:
            return True

        newest_source = max(f.stat().st_mtime for f in source_files)

        try:
            html_time = (self.html_dir / "index.html").stat().st_mtime
            return newest_source > html_time
        except FileNotFoundError:
            return True

    # DELETE - Deletar documenta√ß√£o
    def delete_docs(self, confirm=True):
        """Deletar documenta√ß√£o gerada"""
        print("üóëÔ∏è DELETE: Removendo documenta√ß√£o...")

        if confirm:
            response = input("‚ö†Ô∏è Confirma exclus√£o da documenta√ß√£o? (s/N): ")
            if response.lower() != "s":
                print("‚ùå Opera√ß√£o cancelada.")
                return False

        if self.build_dir.exists():
            shutil.rmtree(self.build_dir)
            print("‚úÖ Documenta√ß√£o removida com sucesso!")
        else:
            print("‚ÑπÔ∏è Nenhuma documenta√ß√£o encontrada para remover.")

        return True

    def delete_module_docs(self, module_name):
        """Deletar documenta√ß√£o de m√≥dulo espec√≠fico"""
        module_file = self.source_dir / f"{module_name}.rst"
        if module_file.exists():
            module_file.unlink()
            print(f"‚úÖ Documenta√ß√£o do m√≥dulo {module_name} removida.")
            # Regenerar documenta√ß√£o
            self.update_docs(force=True)
        else:
            print(f"‚ùå Documenta√ß√£o do m√≥dulo {module_name} n√£o encontrada.")

    # Opera√ß√µes auxiliares
    def _run_sphinx_build(self):
        """Executar build do Sphinx"""
        os.chdir(self.docs_dir)

        try:
            if os.name == "nt":  # Windows
                result = subprocess.run(
                    ["make.bat", "html"], capture_output=True, text=True
                )
            else:  # Linux/Mac
                result = subprocess.run(
                    ["make", "html"], capture_output=True, text=True
                )

            if result.returncode == 0:
                print("‚úÖ Documenta√ß√£o gerada com sucesso!")
                return True
            else:
                print(f"‚ùå Erro ao gerar documenta√ß√£o: {result.stderr}")
                return False

        except FileNotFoundError:
            print("‚ùå Comando make n√£o encontrado!")
            return False
        finally:
            os.chdir(self.base_dir)

    def list_modules(self):
        """Listar m√≥dulos dispon√≠veis para documenta√ß√£o"""
        print("üìã M√≥dulos Python dispon√≠veis:")

        backend_dir = self.base_dir / "backend"
        modules = []

        for py_file in backend_dir.rglob("*.py"):
            if "__pycache__" in str(py_file) or py_file.name.startswith("__"):
                continue

            relative_path = py_file.relative_to(backend_dir)
            module_path = str(relative_path.with_suffix("")).replace(os.sep, ".")
            modules.append(module_path)

        for i, module in enumerate(sorted(modules), 1):
            print(f"  {i:2d}. {module}")

        return modules

    def status(self):
        """Mostrar status da documenta√ß√£o"""
        print("üìä STATUS da Documenta√ß√£o:")
        print(f"  üìÅ Diret√≥rio docs: {self.docs_dir}")
        print(
            f"  üìÑ Arquivos fonte: {len(list(self.source_dir.glob('*.rst')))} arquivos RST"
        )

        if self.html_dir.exists():
            html_files = len(list(self.html_dir.rglob("*.html")))
            print(f"  üåê Documenta√ß√£o HTML: {html_files} arquivos")

            try:
                mtime = (self.html_dir / "index.html").stat().st_mtime
                last_build = datetime.fromtimestamp(mtime).strftime("%d/%m/%Y %H:%M:%S")
                print(f"  ‚è∞ √öltima atualiza√ß√£o: {last_build}")
            except FileNotFoundError:
                print("  ‚è∞ √öltima atualiza√ß√£o: Nunca")
        else:
            print("  üåê Documenta√ß√£o HTML: N√£o gerada")

    def watch_and_update(self):
        """Monitorar arquivos e atualizar automaticamente"""
        print("üëÄ WATCH: Monitorando altera√ß√µes nos arquivos...")
        print("         Pressione Ctrl+C para parar")

        last_check = {}

        try:
            while True:
                updated = False

                # Verificar arquivos Python
                for py_file in (self.base_dir / "backend").rglob("*.py"):
                    if "__pycache__" in str(py_file):
                        continue

                    try:
                        mtime = py_file.stat().st_mtime
                        if py_file not in last_check or mtime > last_check[py_file]:
                            last_check[py_file] = mtime
                            updated = True
                    except FileNotFoundError:
                        continue

                if updated:
                    print(
                        f"üîÑ Altera√ß√£o detectada - {datetime.now().strftime('%H:%M:%S')}"
                    )
                    self.update_docs(force=True)

                time.sleep(2)  # Verificar a cada 2 segundos

        except KeyboardInterrupt:
            print("\nüëã Monitoramento interrompido.")


def show_help():
    """Exibe ajuda do sistema"""
    print("üìñ USO: python crud_docs.py [comando] [op√ß√µes]")
    print()
    print("üìã COMANDOS DISPON√çVEIS:")
    print("  create [m√≥dulo]     - Criar documenta√ß√£o (geral ou m√≥dulo espec√≠fico)")
    print("  read               - Abrir documenta√ß√£o no navegador")
    print("  update             - Atualizar documenta√ß√£o existente")
    print("  delete [m√≥dulo]    - Deletar documenta√ß√£o (geral ou m√≥dulo espec√≠fico)")
    print("  list               - Listar m√≥dulos dispon√≠veis")
    print("  status             - Mostrar status da documenta√ß√£o")
    print("  watch              - Monitorar e atualizar automaticamente")
    print()
    print("üí° EXEMPLOS:")
    print("  python crud_docs.py create")
    print("  python crud_docs.py create core.models")
    print("  python crud_docs.py read")
    print("  python crud_docs.py update")
    print("  python crud_docs.py delete")
    print("  python crud_docs.py delete core.models")


def main():
    """Interface principal do CRUD"""
    crud = DocumentationCRUD()
    crud.banner()

    if len(sys.argv) < 2:
        show_help()
        return

    command = sys.argv[1].lower()

    if command == "create":
        module = sys.argv[2] if len(sys.argv) > 2 else None
        crud.create_docs(module)

    elif command == "read":
        crud.read_docs()

    elif command == "update":
        crud.update_docs()

    elif command == "delete":
        if len(sys.argv) > 2:
            crud.delete_module_docs(sys.argv[2])
        else:
            crud.delete_docs()

    elif command == "list":
        crud.list_modules()

    elif command == "status":
        crud.status()

    elif command == "watch":
        crud.watch_and_update()

    else:
        print(f"‚ùå Comando inv√°lido: {command}")
        print()
        show_help()


if __name__ == "__main__":
    main()
